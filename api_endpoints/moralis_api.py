# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/moralis_api.ipynb.

# %% auto 0
__all__ = ['moralis_api_key', 'PriceFetcher', 'get_all_prices']

# %% ../nbs/moralis_api.ipynb 3
from .etherscan_api import *
import time 
from moralis import evm_api
from openapi_evm_api.exceptions import ApiException
import json

# %% ../nbs/moralis_api.ipynb 4
import os
from dotenv import load_dotenv
load_dotenv()
moralis_api_key = os.environ.get('moralis_api_key')

# %% ../nbs/moralis_api.ipynb 5
import logging
#logging.getLogger().setLevel(logging.INFO)

logging.getLogger().setLevel(logging.WARNING)


# %% ../nbs/moralis_api.ipynb 6
# def setup_price_cache(filename="../data/token_price_cache.json"):
#     """Initialize or reset the token price cache JSON file."""
#     empty_cache = {}
#     with open(filename, 'w') as f:
#         json.dump(empty_cache, f, indent=4)

# Uncomment the above function if you need to use it
# setup_price_cache()

class PriceFetcher:
    def __init__(self, etherscan_api_key, moralis_api_key, cache_filename="../data/token_price_cache.json"):
        self.cache_filename = cache_filename
        self.etherscan_api_key = etherscan_api_key
        self.moralis_api_key = moralis_api_key
        
        blockfetcher = BlockFetcher(self.etherscan_api_key)
        self.get_block_for_date = blockfetcher.get_block_for_date
        
        self.load_cache()

    def load_cache(self):
        try:
            with open(self.cache_filename, 'r') as f:
                self.cache = json.load(f)
        except FileNotFoundError:
            self.cache = {}

    def save_cache(self):
        with open(self.cache_filename, 'w') as f:
            json.dump(self.cache, f, indent=4)

    def get_token_price_on_date(self, date, tokenAddress):
        start_time = time.time()
        cache_key = f"{date}_{tokenAddress}"

        if cache_key in self.cache:
            cached_value = self.cache[cache_key]

            if cached_value == "API_ERROR":
                return None

            return cached_value

        pre_block_time = time.time()
        block_number = self.get_block_for_date(date)
        logging.info('Block fetching time: %s', time.time() - pre_block_time)

        if block_number is None:
            logging.info(f"Could not find block number for date {date}.")
            self.cache[cache_key] = "NO_DATA"
            self.save_cache()
            return None
        
        params = {
            "chain": "eth",
            "include": "percent_change",
            "address": tokenAddress,
            "to_block": float(block_number),
        }

        try:
            result = evm_api.token.get_token_price(
                api_key=self.moralis_api_key,
                params=params,
            )
            price = result['usdPrice']
            logging.info('API call time: %s', time.time() - pre_block_time)

            # Update the cache with the fetched price
            self.cache[cache_key] = price
            self.save_cache()  # Save cache after updating
            logging.info('Total function time: %s', time.time() - start_time)
            return price

        except ApiException:
            logging.error(f"ApiException occurred while fetching price for token {tokenAddress} on date {date}. It's possible the API did not find the token or encountered other issues.")
            self.cache[cache_key] = "API_ERROR"
            self.save_cache()  # Save cache after updating
            return None
        except Exception as e:
            logging.error(f"An unexpected error occurred while fetching price for token {tokenAddress} on date {date}: {str(e)}")
            self.cache[cache_key] = "NO_DATA"
            self.save_cache()
            return None


# %% ../nbs/moralis_api.ipynb 9
import datetime

def get_all_prices(tokenAddress:str,etherscan_api_key:str,moralis_api_key:str):
    "Get all prices for a token from inception to current date. So one price per day."

    #Alright. Let's get all the prices since inception for hpbitcoin.  
    #tokenAddress = '0x72e4f9f808c49a2a61de9c5896298920dc4eeea9' #hpbitcoin
    price_fetcher = PriceFetcher(etherscan_api_key=etherscan_api_key, moralis_api_key=moralis_api_key)

    #Step 1): Get the creation date of the token.
    _creation_date = get_creation_date(contract_address=tokenAddress,api_key=etherscan_api_key)
    _creation_date = _creation_date.split(" ")[0]
    #print(f"Creation date: {_creation_date}")

    #Get all dates from then until now:
    dates_list = generate_dates_between(_creation_date, datetime.now().strftime("%Y-%m-%d"))
    #print(f"Number of dates: {len(dates_list)}")
    #print(f"First date: {dates_list[0]} | Last date: {dates_list[-1]}")

    for date in dates_list:
        price=price_fetcher.get_token_price_on_date(date=date, tokenAddress=tokenAddress)
        #print(f"The price of token on {date} was {price}")


